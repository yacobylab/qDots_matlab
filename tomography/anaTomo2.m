function d = anaTomo2(file, pulse, frames, scale, ypls, refind, ax)% d = anaTomo2(file, pulse, frames, scale, ypls, refind)% % pulse: row vector with pulses numbers of first pulse in each series.% frames: frames to be averaged ([] = all valid).% scale: matrix with scaling factors, one rwo for each pulse series%       containing:%       - amplitude scale fac, %       - reference level to remain invariant (in bloch sphere coords), %       - time scale, %       - time offset%% ypls: pulse series (specified as index to pulse argument) to be used as Y%       coord. Default = 0, meaning none.% % arguments 3-6 are optional.global awgdata;    if ischar(file)    load(file, 'data', 'scan');    data = data{1};else     data = file.data{1};    scan = file.scan;end    if nargin < 3 || isempty(frames)    frames = 1:find(isfinite(data(:, end, end)), 1, 'last');endif nargin < 5    ypls = [];endcut = 10; % ignore data points before this one.nsamp = size(data, 3);if nargin < 6 || isempty(refind)    refind = 1;endif length(pulse) ==1    pulse = pulse + (0:3);endnpulse = length(pulse);dt = awgdata.xval(scan.data.pulses);dt(isnan(dt)) = -1;m = mean(data(frames, :, cut:end), 3);% average values for same pulsem2 = mean(m, 1);sd = std(m, 1);switch refind    case 1  % dedicated ref pulses, two compensation groups        refpls = [16855+(0:2), 187];        ref = zeros(1, 2 * length(refpls));        err = zeros(1, length(refpls));        for i = 1:length(refpls)            refval = m2(scan.data.pulses==refpls(i));            ref(i) = mean(refval(1:end-1));            err(i) = std(refval(1:end-1));            ref(i + length(refpls)) = refval(end);            %sd(scan.data.pulses==refpls(i))./sqrt(30)*1e6        end        ref = ref * 1e6;        fprintf('Compensation: %f +- %f muV\n', ...            mean(ref(1:end/2)-ref(end/2+1:end)), std(ref(1:end/2)-ref(end/2+1:end)));        fprintf('T2* gain: %f muV\n', ref(3) - ref(4));        fprintf('Mix gain: %f muV\n', ref(1) - mean(ref([2 4])));        fprintf('Ref ramp: %f muV\n', (ref(2) - ref(4))/2);        fprintf('Mix ramp: %f muV\n', ref(1) - ref(3));        fprintf('Cal error: %f %f %f %f muV\n',  err*1e6);        gain = ref(1) - mean(ref([2 4]));        mixval = ref(1);        gainX = ref(5) - mean(ref([6 8]));        mixX = ref(6) + gainX;    case 2 % same procedure for earlier datasets: no compensation, 0 ns pulse instead of ref pulse        refpls = [pulse(1:2), 896, 187];        ref = zeros(1, length(refpls));        err = zeros(1, length(refpls));        for i = 1:length(refpls)            refval = m2(scan.data.pulses==refpls(i));            ref(i) = mean(refval);            err(i) = std(refval);            %sd(scan.data.pulses==refpls(i))./sqrt(30)*1e6        end        ref = ref * 1e6;        fprintf('T2* gain: %f muV\n', ref(3) - ref(4));        fprintf('Mix gain: %f muV\n', ref(1) - mean(ref([2 4])));        fprintf('Ref ramp: %f muV\n', (ref(2) - ref(4))/2);        fprintf('Mix ramp: %f muV\n', ref(1) - ref(3));        fprintf('Cal error: %f %f %f %f muV\n',  err*1e6);        gain = ref(1) - mean(ref([2 4]));        mixval = ref(1);        gainX = gain;        mixX = ref(2) + gainX;endif nargin < 7    figure(5);    clf    subplot(211);    hold on;else    axes(ax(1));endc = 'rgbcmyk';d = zeros(npulse, 31);for i = 1:npulse    ind = find(scan.data.pulses == pulse(i));    pls = [];    for j = 1:length(ind);        brk = find([dt(ind(j)+1:end) < dt(ind(j):end-1), true], 1)-1;        pls = [pls; ind(j)+(0:brk)];    end    %ref = mean(m2(refpls2(:)));    %plot(-ones(size(refpls2)), m2(refpls2)-ref, '.', dt(pls(1, :)), (m2(pls)-ref)./gain);    %plot( dt(pls(1, :)), (m2(pls)-ref)./gain + i, c(i));    if i == 2         d(i, :) = -(m2(pls)*1e6-mixX)./gainX;    else        d(i, :) = -(m2(pls)*1e6-mixval)./gain;    end    t(i, :) = dt(pls(1, :));    plot(t(i, :), d(i, :) + 0*(i-1), c(i));    %r2-r1    lstr{i} = sprintf('%d', pulse(i));endif ischar(file)    th = title(file);    set(th, 'Interpreter', 'none')endlegend(lstr{:});if nargin < 4 || isempty(scale)    return;endt3 = linspace(min(t(:, 1)), 0.8*max(t(:, end)), 1000);for i = 1:npulse    t2(i, :) = t(i, :) * scale(i, 3) + scale(i, 4);    d2(i, :) = (d(i, :) - scale(i, 2)) .* scale(i, 1) + scale(i, 2);    d3(i, :) = interp1(t2(i, :), d2(i, :), t3, 'spline');endif nargin < 7    figure(5);    subplot(212);    hold on;else    axes(ax(2));endif isempty(ypls) || ypls == 0    h = plot(t3, d3(1, :).^2, 'r', t2(1, :), d2(1, :).^2, 'r.',...        t3, d3(2, :).^2, 'g', t2(2, :), d2(2, :).^2, 'g.',...        t3, sqrt(sum(d3(1:2, :).^2)), 'k');    legend(h(1:2:5), 'X^2', 'Z^2', 'sqrt(X^2 + Z^2)')else    h = plot(t3, d3(1, :).^2, 'r', t2(1, :), d2(1, :).^2, 'r.',...        t3, d3(2, :).^2, 'g', t2(2, :), d2(2, :).^2, 'g.',...        t3, d3(ypls, :).^2, c(ypls), t2(ypls, :), d2(ypls, :).^2, [c(ypls), '.'],...        t3, sqrt(sum(d3([1:2 ypls], :).^2)), 'k');    legend(h(1:2:7), 'X^2', 'Z^2', 'Y^2', 'sqrt(X^2 + Y^2 + Z^2)')    figure(6);    clf    plot3(d3(1, :), d3(ypls, :), d3(2, :), ...        [0 mean(d3(1, :))], [0 mean(d3(ypls, :))], [0 mean(d3(2, :))], 'r');    % [0 d3(1, end)], [0 d3(2, end)], [0 d3(ypls, end)], 'r', ...    set(gca, 'DataAspectRatio', [1 1 1])endreturn;
