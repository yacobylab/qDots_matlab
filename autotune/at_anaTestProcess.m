function out=at_anaTestProcess(fname,opts)
% function out=at_anaTestProcess(fname,opts)
% Analyze data generated by at_TestProcess
%
% opts.opts :  plot ; generate 2d plots
%              plot3d; generate 3d plots
%              quite;  STF up
%              nocolor; don't make 2d colorscale plot
%   default: plot
%
% opts.tgt;    target process.  If given, will compute fidelities
% opts.frames; which reps to use.
%
% opts is also passed along to ana_extract_process, so please see its help.

if ~exist('fname','var') || isempty(fname)
   fname=uigetfile('attp*.mat');
end
if ~exist('opts','var')
    opts=struct();
end
if ischar(opts)
    opts=struct('opts',opts);
end

fprintf('at_anaTestProcess(''%s'');\n',fname);

opts=def(opts,'opts','plot');
opts=def(opts,'tgt',[]);
opts=def(opts,'frames',[]);
attp=load(fname);
attp=attp.out;
out.attp=attp;

if exist([attp.fname '.mat'], 'file')
    d=ana_avg(attp.fname,'noplot noppt');
elseif exist(['sm_' attp.fname '.mat'], 'file')
    d=ana_avg(['sm_', attp.fname],'noplot noppt');
else
   error('Cannot Find File %s. Make sure it exists \n',attp.fname); 
end

axismap={'UD','Y','ST'};
k=0;

% Unpack the data into groups, pulses, and XYZ.
for i = 1:length(d.scan.data.pulsegroups)
    if ~isempty(regexp(d.scan.data.pulsegroups(i).name,'^dBz'))
        continue;
    end
    for j=1:length(axismap)
       if regexp(d.scan.data.pulsegroups(i).name,axismap{j})
           if ~isopt(opts,'quiet') && 0
             fprintf('Group %d(%s) measures %s goes to sequence %d row %d\n', ...
              i,d.scan.data.pulsegroups(i).name,axismap{j},floor(k/3)+1,j);
           end
           data{floor(k/3)+1}(j,:) = -(squeeze(nanmean(d.data{1}(:,i,:),1))*2-1);
           dataraw{floor(k/3)+1}(:,j,:) = 2*squeeze(d.data{1}(:,i,:))-1;
%           datav{floor(k/3)+1}(j,:) = (2*nanstd(d.data{1}(:,i,:),[],1)/sqrt(size(d.data{1},1))).^2;
       end
    end
    if length(d.tv) >= i
      out.tv(floor(k/3)+1) = d.tv(i);
    else
      out.tv(i) = nan;
    end
    k=k+1;
end
% At this point, data has 3xN arrays of mean vaules, 1 per process.
% At this point dataraw has nloop x 3 x N arrays of raw data, 1 per process
% Accumulate covariance matrices for process i, prep j into datacv{i}(:,:,j)

for j = 1:length(dataraw)
   for i=1:size(dataraw{j},1)
      if any(any(isnan(dataraw{j}(i,:,:))))
          dataraw{j}(i:end,:,:)=[];
          break;
      end
   end
end

for i=1:length(dataraw)
    for j=1:size(dataraw{i},3)  
       datacv{i}(:,:,j)=cov(dataraw{i}(:,:,j))/size(dataraw{i},1);
    end
    dataraw{i}=[]; % to save memory
end
            
if ~isopt(opts,'nocolor')
    figure(1);
    clf;
    rdata=reshape(permute(d.data{1},[1 3 2]),size(d.data{1},1),size(d.data{1},2)*size(d.data{1},3));
    imagesc(rdata);
end

is=data{1};
iscv=datacv{1};   
tic
parfor k=1:(length(data)-1);    
   fs=data{k+1};
   fscv=datacv{k+1};
   pdata(k)=ana_extract_process(is,iscv,fs,fscv,opts);
   fdata{k}=inv(pdata(k).pm)*pdata(k).fs;
   fdata{k}=fdata{k}(2:end,:);
end
toc
out.pdata=pdata;


if isopt(opts,'plot3d')
  ana_plotTomoStates(data,out.tv);  
  ana_plotTomoStates(fdata,out.tv(2:end),struct('fignum',257));  
end

return;

% Apply a default.
function s=def(s,f,v)
  if(~isfield(s,f))
      s=setfield(s,f,v);
  end
return;

function b=isopt(config,name)
  b=~isempty(strfind(config.opts,name));
return;